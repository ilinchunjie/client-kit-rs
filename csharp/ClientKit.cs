// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace URS.ClientKit
{
    internal static unsafe partial class ClientKit
    {
#if UNITY_IOS && !UNITY_EDITOR
        const string __DllName = "__Internal";
#else
        const string __DllName = "clientkit";
#endif
        



        [DllImport(__DllName, EntryPoint = "start_download_service", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern FFIDownloadService* start_download_service([MarshalAs(UnmanagedType.U1)] bool multi_thread, ushort thread_count, ushort parallel_count);

        [DllImport(__DllName, EntryPoint = "set_parallel_count", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_parallel_count(DownloadService* ptr, ushort count);

        [DllImport(__DllName, EntryPoint = "stop_download_service", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void stop_download_service(DownloadService* ptr);

        [DllImport(__DllName, EntryPoint = "add_downloader", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern FFIDownloadOperation* add_downloader(DownloadService* ptr, DownloadConfig config);

        [DllImport(__DllName, EntryPoint = "get_download_status", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte get_download_status(DownloadOperation* ptr);

        [DllImport(__DllName, EntryPoint = "get_download_is_done", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool get_download_is_done(DownloadOperation* ptr);

        [DllImport(__DllName, EntryPoint = "get_download_is_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool get_download_is_error(DownloadOperation* ptr);

        [DllImport(__DllName, EntryPoint = "get_download_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern FFIString* get_download_error(DownloadOperation* ptr);

        [DllImport(__DllName, EntryPoint = "free_download_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_download_error(FFIString* ptr);

        [DllImport(__DllName, EntryPoint = "get_downloaded_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong get_downloaded_size(DownloadOperation* ptr);

        [DllImport(__DllName, EntryPoint = "get_download_progress", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double get_download_progress(DownloadOperation* ptr);

        [DllImport(__DllName, EntryPoint = "stop_downloader", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void stop_downloader(DownloadOperation* ptr);

        [DllImport(__DllName, EntryPoint = "downloader_dispose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void downloader_dispose(DownloadOperation* ptr);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct DownloadConfig
    {
        public FFIString url;
        public FFIString path;
        public byte retry_times;
        [MarshalAs(UnmanagedType.U1)] public bool chunk_download;
        public long version;
        public ulong chunk_size;
        public ulong timeout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FFIDownloadService
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FFIDownloadOperation
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FFIString
    {
        public byte* ptr;
        public uint len;
    }



}
    